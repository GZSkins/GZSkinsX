// <auto-generated by AppxContext.Services.g.tt (t4 template file). />

// Copyright 2022 - 2023 GZSkins, Inc. All rights reserved.
// Licensed under the Mozilla Public License, Version 2.0 (the "License.txt").
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#nullable enable

namespace GZSkinsX.Api.Appx;

public static partial class AppxContext
{
    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.AccessCache.IFutureAccessService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.AccessCache.IFutureAccessService FutureAccessService
    {
        get => CheckAccess(ref s_futureAccessService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.AccessCache.IMostRecentlyUsedService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.AccessCache.IMostRecentlyUsedService MostRecentlyUsedService
    {
        get => CheckAccess(ref s_mostRecentlyUsedService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Appx.IAppxWindow"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Appx.IAppxWindow AppxWindow
    {
        get => CheckAccess(ref s_appxWindow);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Appx.IAppxTitleBar"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Appx.IAppxTitleBar AppxTitleBar
    {
        get => CheckAccess(ref s_appxTitleBar);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Appx.IAppxTitleBarButton"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Appx.IAppxTitleBarButton AppxTitleBarButton
    {
        get => CheckAccess(ref s_appxTitleBarButton);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Commands.ICommandBarService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Commands.ICommandBarService CommandBarService
    {
        get => CheckAccess(ref s_commandBarService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.ContextMenu.IContextMenuService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.ContextMenu.IContextMenuService ContextMenuService
    {
        get => CheckAccess(ref s_contextMenuService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Game.IGameService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Game.IGameService GameService
    {
        get => CheckAccess(ref s_gameService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Logging.ILoggingService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Logging.ILoggingService LoggingService
    {
        get => CheckAccess(ref s_loggingService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.MRT.IMRTCoreService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.MRT.IMRTCoreService MRTCoreService
    {
        get => CheckAccess(ref s_mRTCoreService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Navigation.INavigationViewManagerFactory"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Navigation.INavigationViewManagerFactory NavigationViewManagerFactory
    {
        get => CheckAccess(ref s_navigationViewManagerFactory);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Settings.ISettingsService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Settings.ISettingsService SettingsService
    {
        get => CheckAccess(ref s_settingsService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.Themes.IThemeService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.Themes.IThemeService ThemeService
    {
        get => CheckAccess(ref s_themeService);
    }

    /// <summary>
    /// ????????? <see cref="global::GZSkinsX.Api.WindowManager.IWindowManagerService"/> ????
    /// </summary>
    public static global::GZSkinsX.Api.WindowManager.IWindowManagerService WindowManagerService
    {
        get => CheckAccess(ref s_windowManagerService);
    }

    /// <summary>
    /// ???????????????????
    /// </summary>
    /// <typeparam name="T">???????</typeparam>
    /// <returns>?? <typeparamref name="T"/> ???</returns>
    public static T Resolve<T>() where T : class
    {
        if (_compositionHost is null)
            throw new global::System.InvalidOperationException();

        return _compositionHost.GetExport<T>();
    }

    /// <summary>
    /// ?????????????????????
    /// </summary>
    /// <typeparam name="T">ExportAttribute ?????????</typeparam>
    /// <param name="value">?????????,??????????? default</param>
    /// <returns>???????? true,???? false</returns>
    public static bool TryResolve<T>([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? value) where T : class
    {
        if (_compositionHost is null)
            throw new global::System.InvalidOperationException();

        return _compositionHost.TryGetExport<T>(out value);
    }

    /// <summary>
    /// ???????????????
    /// </summary>
    private static global::System.Composition.Hosting.CompositionHost? _compositionHost;

    /// <summary>
    /// ????????????????
    /// </summary>
    /// <typeparam name="T">??????????</typeparam>
    /// <param name="service">?????????</param>
    /// <returns>??????? <typeparamref name="T"/> ??????</returns>
    /// <exception cref="global::System.InvalidOperationException">?????????,?????? <typeparamref name="T"/> ??????????</exception>
    private static T CheckAccess<T>([global::System.Diagnostics.CodeAnalysis.NotNull] ref T? service) where T : class
    {
        if (service is null)
        {
            if (_compositionHost is null)
            {
                throw new global::System.InvalidOperationException("The main app is not initialized!");
            }

            service = _compositionHost.GetExport<T>();
        }

        return service;
    }

    private static global::GZSkinsX.Api.AccessCache.IFutureAccessService? s_futureAccessService;
    private static global::GZSkinsX.Api.AccessCache.IMostRecentlyUsedService? s_mostRecentlyUsedService;
    private static global::GZSkinsX.Api.Appx.IAppxWindow? s_appxWindow;
    private static global::GZSkinsX.Api.Appx.IAppxTitleBar? s_appxTitleBar;
    private static global::GZSkinsX.Api.Appx.IAppxTitleBarButton? s_appxTitleBarButton;
    private static global::GZSkinsX.Api.Commands.ICommandBarService? s_commandBarService;
    private static global::GZSkinsX.Api.ContextMenu.IContextMenuService? s_contextMenuService;
    private static global::GZSkinsX.Api.Game.IGameService? s_gameService;
    private static global::GZSkinsX.Api.Logging.ILoggingService? s_loggingService;
    private static global::GZSkinsX.Api.MRT.IMRTCoreService? s_mRTCoreService;
    private static global::GZSkinsX.Api.Navigation.INavigationViewManagerFactory? s_navigationViewManagerFactory;
    private static global::GZSkinsX.Api.Settings.ISettingsService? s_settingsService;
    private static global::GZSkinsX.Api.Themes.IThemeService? s_themeService;
    private static global::GZSkinsX.Api.WindowManager.IWindowManagerService? s_windowManagerService;
}
