// <auto-generated by AppxContext.Services.g.tt (t4 template file). />

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright 2022 - 2023 GZSkins, Inc. All rights reserved.
// Licensed under the Mozilla Public License, Version 2.0 (the "License.txt").
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#nullable enable

namespace GZSkinsX.Api.Appx;

public static partial class AppxContext
{
<#
    var services = new List<string>()
    {
        "global::GZSkinsX.Api.AccessCache.IFutureAccessService",
        "global::GZSkinsX.Api.AccessCache.IMostRecentlyUsedItemService",
        "global::GZSkinsX.Api.Appx.IAppxWindow",
        "global::GZSkinsX.Api.Appx.IAppxTitleBar",
        "global::GZSkinsX.Api.Appx.IAppxTitleBarButton",
        "global::GZSkinsX.Api.Commands.ICommandBarService",
        "global::GZSkinsX.Api.ContextMenu.IContextMenuService",
        "global::GZSkinsX.Api.Game.IGameService",
        "global::GZSkinsX.Api.Logging.ILoggingService",
        "global::GZSkinsX.Api.MRT.IMRTCoreService",
        "global::GZSkinsX.Api.Navigation.INavigationViewFactory",
        "global::GZSkinsX.Api.Settings.ISettingsService",
        "global::GZSkinsX.Api.Themes.IThemeService",
        "global::GZSkinsX.Api.WindowManager.IWindowManagerService"
    };

    var shortNames = new List<string>(services.Count);
    var staticFields = new List<string>(services.Count);
    foreach (var item in services)
    {
        var lastIndexOfDot = item.LastIndexOf('.');
        var serviceName = item.Substring(lastIndexOfDot + 2);

        shortNames.Add(serviceName);
        staticFields.Add(string.Format("s_{0}{1}", char.ToLower(serviceName[0]), serviceName.Substring(1)));
    }
    for (var j = 0; j < services.Count; j++)
    {
#>
    /// <summary>
    /// 获取全局静态共享的 <see cref="<#= services[j] #>"/> 对象实例
    /// </summary>
    public static <#= services[j] #> <#= shortNames[j] #>
    {
        get => CheckAccess(ref <#= staticFields[j] #>);
    }

<#
    }
#>
    /// <summary>
    /// 从已加载的所有组件中获取导出的类型实例
    /// </summary>
    /// <typeparam name="T">需要获取的类型</typeparam>
    /// <returns>返回 <typeparamref name="T"/> 的实例</returns>
    public static T Resolve<T>() where T : class
    => _compositionHost.GetExport<T>();

    /// <summary>
    /// 尝试从已加载的所有组件中获取导出的类型实例
    /// </summary>
    /// <typeparam name="T">ExportAttribute 中所声明的导出类型</typeparam>
    /// <param name="value">已获取到的类型实例，但如果获取失败则会返回 default</param>
    /// <returns>当获取成功时返回 true，否则返回 false</returns>
    public static bool TryResolve<T>([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? value) where T : class
    => _compositionHost.TryGetExport<T>(out value);

    /// <summary>
    /// 用于获取已导出的类型的组件容器
    /// </summary>
    private static global::System.Composition.Hosting.CompositionHost? _compositionHost;

    /// <summary>
    /// 检查和获取指定导出类型的成员对象
    /// </summary>
    /// <typeparam name="T">需要获取对象导出类型</typeparam>
    /// <param name="service">需要检查的成员对象</param>
    /// <returns>已获取的非空的 <typeparamref name="T"/> 类型对象实例</returns>
    /// <exception cref="global::System.InvalidOperationException">当应用程序未初始化，或找不到指定 <typeparamref name="T"/> 导出类型的对象时发生</exception>
    private static T CheckAccess<T>([global::System.Diagnostics.CodeAnalysis.NotNull] ref T? service) where T : class
    {
        if (_compositionHost is null)
        {
            throw new global::System.InvalidOperationException("The main app is not initialized!");
        }

        return service ??= _compositionHost.GetExport<T>();
    }
    
<#
    for (var i = 0; i < services.Count; i++)
    {
#>
    private static <#= services[i] #>? <#= staticFields[i] #>;
<#
    }
#>
}
